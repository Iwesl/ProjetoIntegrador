/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.projeto.form;

import br.projeto.DAO.ServicoDAO;
import br.projeto.data.OS;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Igor
 */
public class FrmServicos extends javax.swing.JFrame {

    /**
     * Creates new form FrmServicos
     */
    public FrmServicos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fmrNumOS = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        AbrirOS = new javax.swing.JButton();
        Fechar = new javax.swing.JButton();
        Cadastrar = new javax.swing.JButton();
        LimparCampos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        PesquisarCompleto = new javax.swing.JButton();
        fmrNomeCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Numero da OS");

        AbrirOS.setText("Abrir OS");
        AbrirOS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AbrirOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirOSActionPerformed(evt);
            }
        });

        Fechar.setText("Fechar");
        Fechar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Fechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FecharActionPerformed(evt);
            }
        });

        Cadastrar.setText("Cadastrar");
        Cadastrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CadastrarActionPerformed(evt);
            }
        });

        LimparCampos.setText("Limpar Campos");
        LimparCampos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LimparCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimparCamposActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número da OS", "Nome Cliente", "Nome Funcionário", "Status", "Descrição do Problema", "Data Abertura", "Data Fechamento", "Nome das peças", "Valor Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Obs: deixe o campo vazio e clique em Pesquisar para listar todos");

        PesquisarCompleto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        PesquisarCompleto.setText("Pesquisar");
        PesquisarCompleto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PesquisarCompleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PesquisarCompletoActionPerformed(evt);
            }
        });

        jLabel3.setText("Nome do cliente");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Cadastrar)
                        .addGap(18, 18, 18)
                        .addComponent(AbrirOS)
                        .addGap(18, 18, 18)
                        .addComponent(PesquisarCompleto)
                        .addGap(18, 18, 18)
                        .addComponent(LimparCampos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Fechar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(fmrNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(fmrNumOS, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(175, 175, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(19, 19, 19)))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addGap(7, 7, 7)
                        .addComponent(fmrNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(7, 7, 7)
                        .addComponent(fmrNumOS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Fechar)
                    .addComponent(AbrirOS)
                    .addComponent(Cadastrar)
                    .addComponent(LimparCampos)
                    .addComponent(PesquisarCompleto))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void FecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FecharActionPerformed
        this.dispose();
    }//GEN-LAST:event_FecharActionPerformed

    private void CadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CadastrarActionPerformed
         String[] options = {"Clientes", "Peças", "Veículos", "Usuários"};
        int cadastrar = JOptionPane.showOptionDialog(this, "Que tipo de cadastro deseja fazer?", "ATENÇÃO", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

        switch (cadastrar + 1) {
            case 1:
                FrmClientes cl = new FrmClientes();
                cl.setVisible(true);
                break;
            case 2:
                FrmPecas p = new FrmPecas();
                p.setVisible(true);
                break;
            case 3:
                FrmVeiculos v = new FrmVeiculos();
                v.setVisible(true);
                break;
            case 4:
                FrmUsuarios u = new FrmUsuarios();
                u.setVisible(true);
                break;
            default:
                // não faz nada
        }
    }//GEN-LAST:event_CadastrarActionPerformed

    private void LimparCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimparCamposActionPerformed
        fmrNumOS.setText("");
        fmrNomeCliente.setText("");
        DefaultTableModel modeloTabela = (DefaultTableModel) jTable1.getModel();
            // coloca a tabela em uma variável do tipo DefaultTableModel, que permite a modelagem dos dados da tabela

            for (int i = modeloTabela.getRowCount() - 1; i >= 0; i--) {
                modeloTabela.removeRow(i);
                // loop que limpa a tabela antes de ser atualizada
            }
    }//GEN-LAST:event_LimparCamposActionPerformed

    private void PesquisarCompletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PesquisarCompletoActionPerformed
        if (fmrNumOS.getText().isEmpty() && fmrNomeCliente.getText().isEmpty()) {
            try {
                buscaTodasOsPlus();
            } catch (Exception ex) {
                Logger.getLogger(FrmPesquisar.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (!fmrNumOS.getText().isEmpty()) {
            try {
                buscaTodasOsPorNumPlus();
            } catch (Exception ex) {
                Logger.getLogger(FrmPesquisar.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (!fmrNomeCliente.getText().isEmpty()) {
            try {
                buscaTodasOsPorNomePlus();
            } catch (Exception ex) {
                Logger.getLogger(FrmPesquisar.class.getName()).log(Level.SEVERE, null, ex);
            } 
        } else {
            JOptionPane.showMessageDialog(this, "Preencha apenas um dos campos por vez.", "Pesquisa", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_PesquisarCompletoActionPerformed

    private void AbrirOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirOSActionPerformed
        FrmOS os = new FrmOS();
        os.setVisible(true);
    }//GEN-LAST:event_AbrirOSActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmServicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmServicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmServicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmServicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmServicos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AbrirOS;
    private javax.swing.JButton Cadastrar;
    private javax.swing.JButton Fechar;
    private javax.swing.JButton LimparCampos;
    private javax.swing.JButton PesquisarCompleto;
    private javax.swing.JTextField fmrNomeCliente;
    private javax.swing.JTextField fmrNumOS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
public void buscaTodasOSs() {
        try {
            ServicoDAO sDAO = new ServicoDAO(); // instancia a classe ProdutoDB()
            ArrayList<OS> cl = sDAO.consultaTodasOs(); // coloca o método dentro da variável
            

            DefaultTableModel modeloTabela = (DefaultTableModel) jTable1.getModel();
            // coloca a tabela em uma variável do tipo DefaultTableModel, que permite a modelagem dos dados da tabela

            for (int i = modeloTabela.getRowCount() - 1; i >= 0; i--) {
                modeloTabela.removeRow(i);
                // loop que limpa a tabela antes de ser atualizada
            }

            for (int i = 0; i < cl.size(); i++) {
                // loop que pega os dados e insere na tabela
                Object[] dados = new Object[7]; // instancia os objetos. Cada objeto representa um atributo 
                dados[0] = cl.get(i).getNumero_OS();
                dados[3] = cl.get(i).getStatus_OS();
                dados[4] = cl.get(i).getDefeito_OS();
                dados[5] = cl.get(i).getDataAbertura_OS();
                dados[6] = cl.get(i).getDataFechamento_OS();

                // pega os dados salvos do banco de dados (que estão nas variáveis) e os coloca nos objetos definidos

                modeloTabela.addRow(dados); // insere uma linha nova a cada item novo encontrado na tabela do BD
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Falha na operação.\nErro: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(FrmPesquisar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
public void buscaTodasOsPorNum() {
        try {
            ServicoDAO sDAO = new ServicoDAO(); // instancia a classe ProdutoDB()
            ArrayList<OS> cl = sDAO.consultaTodasPorOS(Integer.parseInt(fmrNumOS.getText().trim())); // coloca o método dentro da variável
            

            DefaultTableModel modeloTabela = (DefaultTableModel) jTable1.getModel();
            // coloca a tabela em uma variável do tipo DefaultTableModel, que permite a modelagem dos dados da tabela

            for (int i = modeloTabela.getRowCount() - 1; i >= 0; i--) {
                modeloTabela.removeRow(i);
                // loop que limpa a tabela antes de ser atualizada
            }

            for (int i = 0; i < cl.size(); i++) {
                // loop que pega os dados e insere na tabela
                Object[] dados = new Object[7]; // instancia os objetos. Cada objeto representa um atributo 
                dados[0] = cl.get(i).getNumero_OS();
                dados[3] = cl.get(i).getStatus_OS();
                dados[4] = cl.get(i).getDefeito_OS();
                dados[5] = cl.get(i).getDataAbertura_OS();
                dados[6] = cl.get(i).getDataFechamento_OS();
                // pega os dados salvos do banco de dados (que estão nas variáveis) e os coloca nos objetos definidos

                modeloTabela.addRow(dados); // insere uma linha nova a cada item novo encontrado na tabela do BD
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Falha na operação.\nErro: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(FrmPesquisar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
public void buscaTodasOsPorNome() {
        try {
            ServicoDAO sDAO = new ServicoDAO(); // instancia a classe ProdutoDB()
            ArrayList<OS> cl = sDAO.consultaTodasPorNome(fmrNomeCliente.getText()); // coloca o método dentro da variável
            

            DefaultTableModel modeloTabela = (DefaultTableModel) jTable1.getModel();
            // coloca a tabela em uma variável do tipo DefaultTableModel, que permite a modelagem dos dados da tabela

            for (int i = modeloTabela.getRowCount() - 1; i >= 0; i--) {
                modeloTabela.removeRow(i);
                // loop que limpa a tabela antes de ser atualizada
            }

            for (int i = 0; i < cl.size(); i++) {
                // loop que pega os dados e insere na tabela
                Object[] dados = new Object[7]; // instancia os objetos. Cada objeto representa um atributo 
                dados[0] = cl.get(i).getNumero_OS();
                dados[1] = cl.get(i).getIdCliente_OS();
                dados[3] = cl.get(i).getStatus_OS();
                dados[4] = cl.get(i).getDefeito_OS();
                dados[5] = cl.get(i).getDataAbertura_OS();
                dados[6] = cl.get(i).getDataFechamento_OS();
                // pega os dados salvos do banco de dados (que estão nas variáveis) e os coloca nos objetos definidos

                modeloTabela.addRow(dados); // insere uma linha nova a cada item novo encontrado na tabela do BD
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Falha na operação.\nErro: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(FrmPesquisar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
public void buscaTodasOsPlus() {
        try {
            ServicoDAO sDAO = new ServicoDAO(); // instancia a classe ProdutoDB()
            ArrayList<OS> cl = sDAO.consultaTodasOsPlus(); // coloca o método dentro da variável
            

            DefaultTableModel modeloTabela = (DefaultTableModel) jTable1.getModel();
            // coloca a tabela em uma variável do tipo DefaultTableModel, que permite a modelagem dos dados da tabela

            for (int i = modeloTabela.getRowCount() - 1; i >= 0; i--) {
                modeloTabela.removeRow(i);
                // loop que limpa a tabela antes de ser atualizada
            }

            for (int i = 0; i < cl.size(); i++) {
                // loop que pega os dados e insere na tabela
                Object[] dados = new Object[8]; // instancia os objetos. Cada objeto representa um atributo 
                dados[0] = cl.get(i).getNumero_OS();
                dados[1] = cl.get(i).getIdCliente_OS();
                dados[2] = cl.get(i).getIdUsuario_OS();
                dados[3] = cl.get(i).getStatus_OS();
                dados[4] = cl.get(i).getDefeito_OS();
                dados[5] = cl.get(i).getDataAbertura_OS();
                dados[6] = cl.get(i).getDataFechamento_OS();
                dados[7] = cl.get(i).getNomePeca_OS();
                // pega os dados salvos do banco de dados (que estão nas variáveis) e os coloca nos objetos definidos

                modeloTabela.addRow(dados); // insere uma linha nova a cada item novo encontrado na tabela do BD
            }
             
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Falha na operação.\nErro: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(FrmPesquisar.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }
public void buscaTodasOsPorNumPlus() {
        try {
            ServicoDAO sDAO = new ServicoDAO(); // instancia a classe ProdutoDB()
            ArrayList<OS> cl = sDAO.consultaTodasPorOSPlus(Integer.parseInt(fmrNumOS.getText().trim())); // coloca o método dentro da variável
            

            DefaultTableModel modeloTabela = (DefaultTableModel) jTable1.getModel();
            // coloca a tabela em uma variável do tipo DefaultTableModel, que permite a modelagem dos dados da tabela

            for (int i = modeloTabela.getRowCount() - 1; i >= 0; i--) {
                modeloTabela.removeRow(i);
                // loop que limpa a tabela antes de ser atualizada
            }

            for (int i = 0; i < cl.size(); i++) {
                // loop que pega os dados e insere na tabela
                Object[] dados = new Object[8]; // instancia os objetos. Cada objeto representa um atributo 
                dados[0] = cl.get(i).getNumero_OS();
                dados[1] = cl.get(i).getNomeCliente_OS();
                dados[2] = cl.get(i).getNomeUsuario_OS();
                dados[3] = cl.get(i).getStatus_OS();
                dados[4] = cl.get(i).getDefeito_OS();
                dados[5] = cl.get(i).getDataAbertura_OS();
                dados[6] = cl.get(i).getDataFechamento_OS();
                dados[7] = cl.get(i).getNomePeca_OS();
                // pega os dados salvos do banco de dados (que estão nas variáveis) e os coloca nos objetos definidos

                modeloTabela.addRow(dados); // insere uma linha nova a cada item novo encontrado na tabela do BD
            }
             
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Falha na operação.\nErro: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(FrmPesquisar.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }
public void buscaTodasOsPorNomePlus() {
        try {
            ServicoDAO sDAO = new ServicoDAO(); // instancia a classe ProdutoDB()
            ArrayList<OS> cl = sDAO.consultaTodasPorNomePlus(fmrNomeCliente.getText().trim()); // coloca o método dentro da variável
            

            DefaultTableModel modeloTabela = (DefaultTableModel) jTable1.getModel();
            // coloca a tabela em uma variável do tipo DefaultTableModel, que permite a modelagem dos dados da tabela

            for (int i = modeloTabela.getRowCount() - 1; i >= 0; i--) {
                modeloTabela.removeRow(i);
                // loop que limpa a tabela antes de ser atualizada
            }

            for (int i = 0; i < cl.size(); i++) {
                // loop que pega os dados e insere na tabela
                Object[] dados = new Object[8]; // instancia os objetos. Cada objeto representa um atributo 
                dados[0] = cl.get(i).getNumero_OS();
                dados[1] = cl.get(i).getNomeCliente_OS();
                dados[2] = cl.get(i).getNomeUsuario_OS();
                dados[3] = cl.get(i).getStatus_OS();
                dados[4] = cl.get(i).getDefeito_OS();
                dados[5] = cl.get(i).getDataAbertura_OS();
                dados[6] = cl.get(i).getDataFechamento_OS();
                dados[7] = cl.get(i).getNomePeca_OS();
                // pega os dados salvos do banco de dados (que estão nas variáveis) e os coloca nos objetos definidos

                modeloTabela.addRow(dados); // insere uma linha nova a cada item novo encontrado na tabela do BD
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Falha na operação.\nErro: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(FrmPesquisar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
